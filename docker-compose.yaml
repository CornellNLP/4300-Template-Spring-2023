version: '3.8'
services:
        frontend_app:
                container_name: ${TEAM_NAME}_frontend_app
                ports:
                        - ${FRONTEND_EXTERNAL_PORT}:${FRONTEND_INTERNAL_PORT}
                expose:
                        - ${FRONTEND_EXTERNAL_PORT}
                restart: always
                build:
                        context: ./frontend
                        dockerfile: Dockerfile
                networks:
                        flask_network:
                                aliases:
                                        - flask-network
                command: nginx -g 'daemon off;'
        backend_flask_app:
                container_name: ${TEAM_NAME}_backend_flask_app
                ports:
                        - ${FLASK_EXTERNAL_PORT}:${FLASK_INTERNAL_PORT}
                expose:
                        - ${FLASK_EXTERNAL_PORT}
                restart: always
                build:
                        context: ./backend
                        dockerfile: Dockerfile
                depends_on:
                        - db
                environment:
                        - FLASK_APP=${APP_ROOT}.py
                        - FLASK_RUN_HOST=0.0.0.0
                        - FLASK_DEBUG=0
                networks:
                        flask_network:
                                aliases:
                                        - flask-network
                command: gunicorn --bind 0.0.0.0:${FLASK_INTERNAL_PORT} --workers 4 "${APP_ROOT}:${APP_ROOT}"
        db:
                container_name: ${TEAM_NAME}_db
                image: mysql:latest
                restart: always
                environment:
                        MYSQL_USER: admin
                        MYSQL_PASSWORD: admin
                        MYSQL_DATABASE: kardashiandb
                        MYSQL_ROOT_PASSWORD: admin
                volumes:
                        - ./init.sql:/docker-entrypoint-initdb.d/init.sql
                networks:
                        - flask_network
volumes:
        flask_volume:
networks:
        flask_network: